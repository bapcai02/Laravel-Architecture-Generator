<?php

namespace {{ namespace }};

use Illuminate\Support\Collection;
use Illuminate\Pagination\LengthAwarePaginator;
use {{ model_namespace }}\{{ module_name }};
use {{ module_namespace }}\Repositories\{{ module_name }}RepositoryInterface;

class {{ class_name }}
{
    protected {{ module_name }}RepositoryInterface $repository;

    public function __construct({{ module_name }}RepositoryInterface $repository)
    {
        $this->repository = $repository;
    }

    /**
     * Get all {{ strtolower(class_name) }}s with optional pagination.
     */
    public function getAll(array $filters = [], int $perPage = null): Collection|LengthAwarePaginator
    {
        return $this->repository->getAll($filters, $perPage);
    }

    /**
     * Find a {{ strtolower(class_name) }} by ID.
     */
    public function findById(int $id): ?{{ module_name }}
    {
        return $this->repository->findById($id);
    }

    /**
     * Find a {{ strtolower(class_name) }} by slug.
     */
    public function findBySlug(string $slug): ?{{ module_name }}
    {
        return $this->repository->findBySlug($slug);
    }

    /**
     * Create a new {{ strtolower(class_name) }}.
     */
    public function create(array $data): {{ module_name }}
    {
        // Apply business logic before creation
        $data = $this->prepareDataForCreation($data);
        
        return $this->repository->create($data);
    }

    /**
     * Update an existing {{ strtolower(class_name) }}.
     */
    public function update({{ module_name }} ${{ strtolower(class_name) }}, array $data): {{ module_name }}
    {
        // Apply business logic before update
        $data = $this->prepareDataForUpdate($data);
        
        return $this->repository->update(${{ strtolower(class_name) }}, $data);
    }

    /**
     * Delete a {{ strtolower(class_name) }}.
     */
    public function delete({{ module_name }} ${{ strtolower(class_name) }}): bool
    {
        // Apply business logic before deletion
        $this->validateDeletion(${{ strtolower(class_name) }});
        
        return $this->repository->delete(${{ strtolower(class_name) }});
    }

    /**
     * Activate a {{ strtolower(class_name) }}.
     */
    public function activate({{ module_name }} ${{ strtolower(class_name) }}): bool
    {
        return $this->repository->update(${{ strtolower(class_name) }}, ['status' => 'active']);
    }

    /**
     * Deactivate a {{ strtolower(class_name) }}.
     */
    public function deactivate({{ module_name }} ${{ strtolower(class_name) }}): bool
    {
        return $this->repository->update(${{ strtolower(class_name) }}, ['status' => 'inactive']);
    }

    /**
     * Search {{ strtolower(class_name) }}s by criteria.
     */
    public function search(array $criteria, int $perPage = null): Collection|LengthAwarePaginator
    {
        return $this->repository->search($criteria, $perPage);
    }

    /**
     * Get active {{ strtolower(class_name) }}s.
     */
    public function getActive(): Collection
    {
        return $this->repository->getActive();
    }

    /**
     * Get inactive {{ strtolower(class_name) }}s.
     */
    public function getInactive(): Collection
    {
        return $this->repository->getInactive();
    }

    /**
     * Prepare data for creation.
     */
    protected function prepareDataForCreation(array $data): array
    {
        // Add default values
        $data['status'] = $data['status'] ?? 'active';
        $data['created_at'] = now();
        $data['updated_at'] = now();
        
        return $data;
    }

    /**
     * Prepare data for update.
     */
    protected function prepareDataForUpdate(array $data): array
    {
        $data['updated_at'] = now();
        
        return $data;
    }

    /**
     * Validate if {{ strtolower(class_name) }} can be deleted.
     */
    protected function validateDeletion({{ module_name }} ${{ strtolower(class_name) }}): void
    {
        // Add validation logic here
        // For example, check if {{ strtolower(class_name) }} has related records
        // throw new \Exception('Cannot delete {{ strtolower(class_name) }} with related records');
    }
} 