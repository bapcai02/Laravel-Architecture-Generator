<?php

namespace {{namespace}};

use {{interface_namespace}}\{{interface_name}};
use {{model_namespace}}\{{model_name}};
use {{base_namespace}}\BaseRepository;

/**
 * Class {{class_name}}
 *
 * @package {{namespace}}
 * @author {{author}}
 * @since {{year}}
 */
class {{class_name}} extends BaseRepository implements {{interface_name}}
{
    protected $model;

    public function __construct({{model_name}} $model)
    {
        $this->model = $model;
    }

    {{#if methods}}
    {{#each methods}}
    /**
     * {{description}}
     {{#each params}}
     * @param {{type}} ${{name}} {{description}}
     {{/each}}
     {{#if return_type}}
     * @return {{return_type}}
     {{/if}}
     */
    public function {{name}}({{#each params}}{{#if @index}}, {{/if}}{{#if type}}{{type}} {{/if}}${{name}}{{#if default}} = {{default}}{{/if}}{{/each}}){{#if return_type}}: {{return_type}}{{/if}}
    {
        {{#each body}}
        {{this}}
        {{/each}}
    }

    {{/each}}
    {{else}}
    /**
     * Custom method example
     *
     * @param string $email
     * @return mixed
     */
    public function findByEmail($email)
    {
        return $this->model->where('email', $email)->first();
    }

    /**
     * Custom method example with criteria
     *
     * @param array $criteria
     * @return mixed
     */
    public function findByCriteria(array $criteria)
    {
        $query = $this->model->newQuery();
        
        foreach ($criteria as $field => $value) {
            $query->where($field, $value);
        }
        
        return $query->get();
    }
    {{/if}}
} 