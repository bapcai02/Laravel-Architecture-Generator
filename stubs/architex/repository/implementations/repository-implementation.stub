<?php

namespace {{namespace}};

use {{interface_namespace}}\{{interface_name}};
use {{model_namespace}}\{{model_name}};
use {{base_namespace}}\BaseRepository;

/**
 * Class {{class_name}}
 *
 * @package {{namespace}}
 * @author {{author}}
 * @since {{year}}
 * 
 * @method array getAll(array $filters = [])
 * @method object|null findById(int $id)
 * @method object create(array $data)
 * @method object|null update(int $id, array $data)
 * @method bool delete(int $id)
 * @method bool exists(int $id)
 * @method int count(array $filters = [])
 * @method object|null findBy(string $field, $value)
 * @method array findByCriteria(array $criteria)
 * @method \Illuminate\Pagination\LengthAwarePaginator paginate(int $perPage = 15, array $filters = [])
 */
class {{class_name}} implements {{interface_name}}
{
    use BaseRepository;

    public function __construct({{model_name}} $model)
    {
        $this->initialize($model);
    }

    /**
     * Custom method example
     *
     * @param string $email
     * @return mixed
     */
    public function findByEmail($email)
    {
        return $this->model->where('email', $email)->first();
    }
} 