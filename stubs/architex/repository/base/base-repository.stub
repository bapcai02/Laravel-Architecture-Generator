<?php

namespace {{base_namespace}};

use Illuminate\Database\Eloquent\Model;

/**
 * Trait BaseRepository
 *
 * @package {{base_namespace}}
 * @author {{author}}
 * @since {{year}}
 */
trait BaseRepository
{
    /**
     * @var Model
     */
    protected $model;

    /**
     * Initialize the repository with a model
     *
     * @param Model $model
     */
    public function initialize(Model $model)
    {
        $this->model = $model;
    }

    /**
     * Get all records with optional filters
     *
     * @param array $filters
     * @return array
     */
    public function getAll(array $filters = []): array
    {
        $query = $this->model->newQuery();
        
        if (!empty($filters)) {
            foreach ($filters as $field => $value) {
                $query->where($field, $value);
            }
        }
        
        return $query->get()->toArray();
    }

    /**
     * Find record by ID
     *
     * @param int $id
     * @return object|null
     */
    public function findById(int $id): ?object
    {
        return $this->model->find($id);
    }

    /**
     * Create new record
     *
     * @param array $data
     * @return object
     */
    public function create(array $data): object
    {
        return $this->model->create($data);
    }

    /**
     * Update record
     *
     * @param int $id
     * @param array $data
     * @return object|null
     */
    public function update(int $id, array $data): ?object
    {
        $record = $this->model->find($id);
        if ($record) {
            $record->update($data);
            return $record;
        }
        return null;
    }

    /**
     * Delete record
     *
     * @param int $id
     * @return bool
     */
    public function delete(int $id): bool
    {
        $record = $this->model->find($id);
        if ($record) {
            return $record->delete();
        }
        return false;
    }

    /**
     * Check if record exists
     *
     * @param int $id
     * @return bool
     */
    public function exists(int $id): bool
    {
        return $this->model->where('id', $id)->exists();
    }

    /**
     * Count records with optional filters
     *
     * @param array $filters
     * @return int
     */
    public function count(array $filters = []): int
    {
        $query = $this->model->newQuery();
        
        if (!empty($filters)) {
            foreach ($filters as $field => $value) {
                $query->where($field, $value);
            }
        }
        
        return $query->count();
    }

    /**
     * Find record by specific field
     *
     * @param string $field
     * @param mixed $value
     * @return object|null
     */
    public function findBy(string $field, $value): ?object
    {
        return $this->model->where($field, $value)->first();
    }

    /**
     * Find records by criteria
     *
     * @param array $criteria
     * @return array
     */
    public function findByCriteria(array $criteria): array
    {
        $query = $this->model->newQuery();
        
        foreach ($criteria as $field => $value) {
            if (is_array($value)) {
                $query->whereIn($field, $value);
            } else {
                $query->where($field, $value);
            }
        }
        
        return $query->get()->toArray();
    }

    /**
     * Paginate records
     *
     * @param int $perPage
     * @param array $filters
     * @return \Illuminate\Pagination\LengthAwarePaginator
     */
    public function paginate(int $perPage = 15, array $filters = []): \Illuminate\Pagination\LengthAwarePaginator
    {
        $query = $this->model->newQuery();
        
        if (!empty($filters)) {
            foreach ($filters as $field => $value) {
                $query->where($field, $value);
            }
        }
        
        return $query->paginate($perPage);
    }
} 